import React, { useState } from 'react';

interface SystemPromptModalProps {
  show: boolean;
  onClose: () => void;
  onSave: (prompts: { generation: string; editing: string; analysis: string }) => void;
}

const DEFAULT_ANALYSIS_PROMPT = `你是一位专业的AI图片编辑提示词优化专家，擅长为Gemini 2.5 Flash Image Preview生成精确的图片编辑指令。

请基于图片编辑最佳实践，优化用户的编辑指令，使其更加精确和专业。

## 优化重点
1. 明确编辑目标和范围
2. 保持原图的核心特征
3. 使用精确的编辑术语
4. 考虑视觉和谐性
5. 提供具体的修改指导

请优化编辑指令，使其更加专业和精确。只返回优化后的提示词，用中文输出。`;

const DEFAULT_GENERATION_PROMPT = `你是一位专业的AI图像生成提示词优化专家，专门为Gemini 2.5 Flash Image Preview优化文生图提示词。

## 优化模板结构
1. 主体描述：清晰描述主要对象或人物
2. 环境场景：详细的背景和环境设定
3. 视觉风格：艺术风格、色彩搭配、光影效果
4. 构图细节：角度、景深、焦点
5. 情感氛围：整体感觉和情绪表达

## 优化要求
1. 将简单描述转化为叙事性场景
2. 增加视觉细节和感官描述
3. 使用专业摄影和艺术术语
4. 保持描述的连贯性和逻辑性
5. 突出视觉冲击力和美感
6. 确保描述适合AI理解和执行
7. 用中文输出优化后的提示词
8. 不要包含任何尺寸、分辨率或宽高比信息

请将输入转化为专业的、叙事驱动的提示词，遵循Gemini最佳实践。专注于场景描述和视觉叙事。只返回优化后的提示词，不要解释。`;

const DEFAULT_EDITING_TEMPLATES = [
  { name: '添加元素', prompt: '在图片中添加[具体元素]，保持原有风格和光线一致' },
  { name: '移除元素', prompt: '从图片中移除[具体元素]，自然填补背景' },
  { name: '改变颜色', prompt: '将图片中的[元素]颜色改为[新颜色]' },
  { name: '调整光线', prompt: '调整图片光线为[光线类型]，如温暖/冷色调/自然光' },
  { name: '改变风格', prompt: '将图片转换为[艺术风格]，如油画/水彩/素描风格' },
  { name: '背景替换', prompt: '将背景替换为[新背景描述]，保持主体不变' },
  { name: '季节变换', prompt: '将场景改为[季节]，相应调整环境和氛围' },
  { name: '时间变化', prompt: '将场景时间改为[时间]，如黄昏/夜晚/清晨' }
];

export const SystemPromptModal: React.FC<SystemPromptModalProps> = ({ show, onClose, onSave }) => {
  const [activeMode, setActiveMode] = useState<'generate' | 'analysis' | 'templates'>('generate');
  const [customGenerationPrompt, setCustomGenerationPrompt] = useState(DEFAULT_GENERATION_PROMPT);
  const [customEditingPrompt, setCustomEditingPrompt] = useState('');
  const [customAnalysisPrompt, setCustomAnalysisPrompt] = useState(DEFAULT_ANALYSIS_PROMPT);
  const [editingTemplates, setEditingTemplates] = useState(DEFAULT_EDITING_TEMPLATES);

  if (!show) return null;

  const handleCopy = () => {
    let content = '';
    if (activeMode === 'analysis') {
      content = customAnalysisPrompt;
    } else if (activeMode === 'templates') {
      content = editingTemplates.map(t => `${t.name}: ${t.prompt}`).join('\n');
    } else {
      content = customGenerationPrompt;
    }
    navigator.clipboard.writeText(content).then(() => {
      alert('内容已复制到剪贴板');
    });
  };

  const handleReset = () => {
    if (activeMode === 'analysis') {
      setCustomAnalysisPrompt(DEFAULT_ANALYSIS_PROMPT);
    } else if (activeMode === 'templates') {
      setEditingTemplates(DEFAULT_EDITING_TEMPLATES);
    } else {
      setCustomGenerationPrompt(DEFAULT_GENERATION_PROMPT);
    }
  };

  const handleTemplateChange = (index: number, field: 'name' | 'prompt', value: string) => {
    const newTemplates = [...editingTemplates];
    newTemplates[index][field] = value;
    setEditingTemplates(newTemplates);
  };

  const addTemplate = () => {
    setEditingTemplates([...editingTemplates, { name: '新模板', prompt: '输入提示词...' }]);
  };

  const removeTemplate = (index: number) => {
    setEditingTemplates(editingTemplates.filter((_, i) => i !== index));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center z-50 pt-8">
      <div className="bg-white rounded-lg p-6 max-w-6xl w-full mx-4 max-h-[85vh] overflow-y-auto">
        {/* 标题栏 */}
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-gray-800">自定义 System Prompt</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {/* 标签页切换 */}
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeMode === 'generate' 
                    ? 'border-blue-500 text-blue-600' 
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
                onClick={() => setActiveMode('generate')}
              >
                🎨 图片生成System Prompt
              </button>
              <button
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeMode === 'analysis' 
                    ? 'border-blue-500 text-blue-600' 
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
                onClick={() => setActiveMode('analysis')}
              >
                🧠 图片编辑System Prompt
              </button>
              <button
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeMode === 'templates' 
                    ? 'border-blue-500 text-blue-600' 
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
                onClick={() => setActiveMode('templates')}
              >
                📝 图片编辑快捷Prompt
              </button>
            </nav>
          </div>
        </div>

        {/* 内容区域 */}
        <div className="mb-4">
          {activeMode === 'templates' ? (
            <div>
              <div className="mb-3">
                <h4 className="text-md font-medium text-gray-700 mb-2">图片编辑快捷模板</h4>
                <p className="text-sm text-gray-600 mb-3">
                  预设的常用编辑指令模板，可以快速应用到图片编辑任务中
                </p>
              </div>
              
              <div className="space-y-3 max-h-80 overflow-y-auto">
                {editingTemplates.map((template, index) => (
                  <div key={index} className="flex items-center space-x-2 p-3 border border-gray-200 rounded-lg">
                    <input
                      type="text"
                      value={template.name}
                      onChange={(e) => handleTemplateChange(index, 'name', e.target.value)}
                      className="w-24 px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                      placeholder="模板名称"
                    />
                    <input
                      type="text"
                      value={template.prompt}
                      onChange={(e) => handleTemplateChange(index, 'prompt', e.target.value)}
                      className="flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                      placeholder="提示词模板"
                    />
                    <button
                      onClick={() => removeTemplate(index)}
                      className="px-2 py-1 text-red-600 hover:bg-red-50 rounded"
                      title="删除模板"
                    >
                      ✕
                    </button>
                  </div>
                ))}
              </div>
              
              <button
                onClick={addTemplate}
                className="mt-3 px-3 py-1.5 text-sm bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
              >
                + 添加模板
              </button>
            </div>
          ) : (
            <div>
              <div className="mb-3">
                <h4 className="text-md font-medium text-gray-700 mb-2">
                  {activeMode === 'analysis' ? '图片编辑系统提示词' : '图片生成系统提示词'}
                </h4>
                <p className="text-sm text-gray-600 mb-3">
                  {activeMode === 'analysis'
                    ? '用于指导AI直接分析图片内容并生成针对gemini-2.5-flash-image-preview的优化编辑指令'
                    : '用于指导AI如何优化文生图提示词，将简单描述转化为专业的视觉叙事描述'
                  }
                </p>
              </div>
              
              <textarea
                value={activeMode === 'analysis' ? customAnalysisPrompt : customGenerationPrompt}
                onChange={(e) => {
                  if (activeMode === 'analysis') {
                    setCustomAnalysisPrompt(e.target.value);
                  } else {
                    setCustomGenerationPrompt(e.target.value);
                  }
                }}
                placeholder={`输入${activeMode === 'analysis' ? '图片编辑' : '图片生成'}系统提示词...`}
                className="w-full h-96 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm font-mono"
              />
              
              <div className="mt-2 text-xs text-gray-500">
                字符数：{activeMode === 'analysis' ? customAnalysisPrompt.length : customGenerationPrompt.length}
              </div>
            </div>
          )}
        </div>
        
        {/* 操作按钮 */}
        <div className="flex justify-between items-center">
          <div className="flex space-x-2">
            <button
              onClick={handleReset}
              className="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded"
            >
              重置为默认
            </button>
            
            <button
              onClick={handleCopy}
              className="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded"
            >
              复制内容
            </button>
          </div>
          
          <div className="flex space-x-2">
            <button onClick={onClose} className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded">
              取消
            </button>
            <button
              onClick={() => {
                onSave({
                  generation: customGenerationPrompt,
                  editing: customEditingPrompt,
                  analysis: customAnalysisPrompt
                });
              }}
              className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded"
            >
              保存设置
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
